# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fJsoYdvGIlf_CcsZEx1zbbJ5Cirix0PL
"""

"""
Movie Review Sentiment Analysis Streamlit Application
Loads pre-trained sentiment analysis model and vectorizer artifacts.
Provides an interactive UI for users to input reviews and get sentiment predictions.
"""

import streamlit as st
import joblib
import re
import numpy as np

# ----------------------------
# PAGE CONFIGURATION
# ----------------------------
st.set_page_config(page_title="Movie Review Sentiment Analyzer", layout="wide")

# ----------------------------
# CUSTOM CSS
# ----------------------------
st.markdown(
    """
    <style>
    body {
        background-color: #f8fafc;
        font-family: "Segoe UI", sans-serif;
    }
    .main-title {
        text-align: center;
        color: #4338ca;
        font-size: 32px;
        font-weight: 700;
        margin-bottom: 10px;
    }
    .subtext {
        text-align: center;
        color: #6b7280;
        font-size: 16px;
        margin-bottom: 30px;
    }
    .stTextArea textarea {
        border-radius: 12px !important;
        border: 1px solid #d1d5db !important;
        background-color: #ffffff !important;
        padding: 10px !important;
        font-size: 16px !important;
    }
    .stButton>button {
        background-color: #4f46e5 !important;
        color: white !important;
        font-weight: 600 !important;
        border-radius: 10px !important;
        border: none !important;
        padding: 0.6em 1.2em !important;
        transition: 0.3s ease !important;
    }
    .stButton>button:hover {
        background-color: #4338ca !important;
        transform: scale(1.02);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ----------------------------
# LOAD MODEL AND VECTORIZER
# ----------------------------
@st.cache_resource
def load_artifacts():
    
    """
    Cache and load the trained logistic regression model and TF-IDF vectorizer
    from local joblib files for prediction.
    Returns:
        model: trained LogisticRegression model
        vectorizer: fitted TfidfVectorizer
    """
    
    model = joblib.load("model.joblib")
    vectorizer = joblib.load("vectorizer.joblib")
    return model, vectorizer

model, vectorizer = load_artifacts()

# ----------------------------
# TEXT CLEANING FUNCTION
# ----------------------------
def clean_text(text):
    text = text.lower()
    text = re.sub(r'<.*?>', ' ', text)
    text = re.sub(r'[^a-z\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# ----------------------------
# APP UI
# ----------------------------
st.markdown("<div class='main-title'>üé¨ Movie Review Sentiment Analyzer</div>", unsafe_allow_html=True)
st.markdown("<div class='subtext'>Type a review and click **Analyze Sentiment** to predict its mood!</div>", unsafe_allow_html=True)

review = st.text_area("‚úçÔ∏è Enter your movie review:", height=180, placeholder="e.g., The movie was absolutely fantastic!")

if st.button("üîç Analyze Sentiment"):
    if review.strip() == "":
        st.warning("Please enter a review before analyzing!")
    else:
        cleaned = clean_text(review)
        X = vectorizer.transform([cleaned])
        pred = model.predict(X)[0]
        prob = model.predict_proba(X)[0]
        confidence = np.max(prob) * 100

        if pred == "positive":
            st.success(f"üòÉ Sentiment: **Positive** (Confidence: {confidence:.2f}%)")
        else:
            st.error(f"üòû Sentiment: **Negative** (Confidence: {confidence:.2f}%)")

        # Confidence bar
        st.progress(int(confidence))
